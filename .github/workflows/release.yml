name: release

on:
  push:
    branches:
      - "main"
      - "master"
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+*"
    - "stable"
  pull_request:
  # schedule:
  # - cron: '20 2 */7 * *'

env:
  APP_VERSION: "v0.1.3"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
          - build: windows
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
    timeout-minutes: 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@master
      with:
        python-version: '3.10.6'
    - name: linux build
      if: matrix.build == 'linux'
      run: |
        ./scripts/linux_build.sh gh
    - name: windows build
      if: matrix.build == 'windows'
      run: |
        ./scripts/windows_build.ps1
    - name: mac build
      if: matrix.build == 'macos'
      run: |
        ./scripts/macos_build.sh
    - uses: actions/upload-artifact@v3
      if: |
        matrix.build == 'linux' ||
        matrix.build == 'windows'
      with:
        name: artifacts-${{ matrix.build }}-${{ matrix.arch }}
        path: |
          ./build_binary/*.deb
          ./build_binary/*.exe
        if-no-files-found: error
        retention-days: 1

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'pull_request'
    timeout-minutes: 2
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          sudo apt install -y tree

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
      - if: github.event_name == 'schedule'
        run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
      - if: |
          github.event_name == 'push' &&
          github.ref_type == 'tag'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
          echo "BUILD_USING_TAG=true" >> $GITHUB_ENV
      - if: |
          github.event_name == 'push' &&
          github.ref_type == 'branch'
        run: |
          echo "TAG_NAME=dev" >> $GITHUB_ENV

      # - name: Rename artifacts
      #   run: |
      #     mv -v artifacts_linux/old_name artifacts_linux/new_name

      - name : Checksums
        run: |
          for dir in artifacts*; do
            for el in "$dir"/*; do
              printf "%s\n" "${el}"
              sha256sum "${el}" > "${el}.sha256sum"
            done
          done

      - name: Public release
        run: |
          echo "Publishing to github release"
          tree -L 1 artifacts*
          PRERELEASE_FLAG=""
          case "$TAG_NAME" in
            *dev*|*nightly*|*beta*|*alpha*)
              echo "PRERELEASE"
              PRERELEASE_FLAG="--prerelease"
              ;;
            *)
              echo "Not PRERELEASE"
              ;;
          esac

          if [ ! "$BUILD_USING_TAG" = "true" ] ; then
            echo "Not Built using Tag"
            TAG_NAME="${{ env.APP_VERSION }}.${{ github.run_number }}-${TAG_NAME}"
          else
            echo "Built Using Tag"
          fi
          echo "TAG_NAME : ${TAG_NAME}"
          gh release create ${PRERELEASE_FLAG} "$TAG_NAME" || echo "Release creation failed, but continuing..." && true
          gh release upload --clobber "$TAG_NAME" artifacts-linux-x86_64/*
          gh release upload --clobber "$TAG_NAME" artifacts-windows-x86_64/*

